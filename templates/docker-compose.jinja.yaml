version:    "3.7"
networks:
    backend:
        driver:           bridge
        ipam:
            config:
                  - subnet: {{ defaults.ip|default(172.20) }}.{{ stack.octets[0] }}.0/24
    frontend:
        external:         True  {% if stack.Volumes %}
volumes:        {% for volume in stack.Volumes | sort %}
{{ volume|indent(4,true) }}:
        external:         True  {% endfor %}{% endif %}
secrets:
    PUID:
        file:             ${SECRETS}/PUID.secret
    PGID:
        file:             ${SECRETS}/PGID.secret  {% for service in stack.Services|sort %}{% if stack.Services[service].OAUTH_PROXY or stack.Services[service].proxy_secrets %}
    {{ service|lower }}_proxy_client_id:
        file:             ${SECRETS}/{{ service|lower }}/OAUTH2_PROXY_CLIENT_ID.secret
    {{ service|lower }}_proxy_client_secret:
        file:             ${SECRETS}/{{ service|lower }}/OAUTH2_PROXY_CLIENT_SECRET.secret
    {{ service|lower }}_proxy_cookie_secret:
        file:             ${SECRETS}/{{ service|lower }}/OAUTH2_PROXY_COOKIE_SECRET.secret  {% endif %}{% endfor %}{% for secret in stack.Secrets|sort %}
    {{ secret|lower }}:   {% if service|lower == "elasticsearch" %}
        file:             ${SECRETS}/{{ secret.split('_')[0]|lower|default(service|lower) }}/{{ secret|lower }}.secret  {% else %}
        file:             ${SECRETS}/{{ secret.split('_')[0]|lower|default(service|lower) }}/{{ secret|upper }}.secret  {% endif %}{% endfor %}
services: {% for service in stack.Services | sort %}
    {{ service|lower }}:  {% if stack.Services[service]['OAUTH_PROXY'] or stack.Services[service]['proxy_secrets'] or stack.Secrets or service == "plex_autoscan" %}
        container_name: {{ service|indent(8,true) }}
        secrets:
            - PUID
            - PGID        {% if stack.Services[service]['OAUTH_PROXY'] or stack.Services[service]['proxy_secrets'] %}
            - {{ service|indent }}_proxy_client_id
            - {{ service|indent }}_proxy_client_secret
            - {{ service|indent }}_proxy_cookie_secret {% endif %}{% endif %}{% for key in stack.Services[service]['secrets'] | sort %}
            - {{ key }}   {% endfor %} {% if stack.Services[service]['cap_add'] %}
        cap_add: {% for cap in stack.Services[service]['cap_add'] %}
            - {{ cap }} {% endfor %}  {% endif %}{% if stack.Services[service]['cap_drop'] %}
        cap_drop: {% for cap in stack.Services[service]['cap_drop'] %}
            - {{ cap }} {% endfor %}  {% endif %}
        image: {{ stack.Services[service]['Image']|indent(12,true) }}:{{ stack.Services[service]['tags'] | default('latest') }}  {% if stack.Services[service]['networks'] and not stack.Services[service]['networks']['vpn'] %}
        hostname: {{ service|lower|indent(10,true) }}{% endif %}{% if 'sysctls' in stack.Services[service] %}
        sysctls:            {% for statement in stack.Services[service]['sysctls'] | sort %}
            - "{{ statement|indent }}"       {% endfor %}{% endif %}{% if stack.Services[service]["privileged"] %}
        privileged:         true
        user:               "0:0"{% else %}
        user:               "{{ defaults.PUID }}:{{ defaults.PGID }}"{% endif %}
        env_file:
            - globals.env
            - {{ service|lower }}.env
        volumes:          {% for volume in stack.Services[service]['Volumes'] | sort %}
            - {{ volume }}  {% endfor %}{% if stack.Services[service]['ports'] and not stack.Services[service]['mask_ports'] %}
        ports: {% for port in stack.Services[service]['ports']|sort %}
            - {{ port }}{% endfor %}{% endif %}
        domainname:         {{ defaults.Domain|default("localhost")}} {% if stack.Services[service]['networks'] and not stack.Services[service]['networks']['vpn'] %}
        dns:  {% if not stack.Services[service]['DNS'] %} {% for nameserver in defaults.DNS %}
            - {{ nameserver }}  {% endfor %} {% else %} {% for nameserver in stack.Services[service]['DNS'] %}
            - {{ nameserver }}  {% endfor %} {% endif %} {% endif %}        {% if (stack.Services[service]['networks'] and stack.Services[service]['networks']['vpn']) %}
        network_mode:           "service:{{ defaults.VPN_CONTAINER }}" {% else %}
        networks:
            - backend   {% if stack.Services[service]['networks'] and stack.Services[service]['networks']['frontend'] and not stack.Services[service]['OAUTH_PROXY'] or stack.Services[service]['proxy_secrets'] %}
            - frontend  {% endif %}  {% endif %}
        labels:
            - service.name={{ service | lower }}  {% if stack.Services[service]['labels'] %}{% for label in stack.Services[service]['labels'] %}
            - {{ label }}   {% endfor %}{% endif %}
{%- if not stack.Services[service]['OAUTH_PROXY'] or stack.Services[service]['proxy_secrets'] %}
{%- if stack.Services[service]['ports'] and stack.Services[service]['subdomains'] and stack.Services[service]['networks'] and stack.Services[service]['networks']['frontend'] %}
            - "traefik.enable=true"
            - "traefik.protocol=http"
            - "traefik.backend={{ service }}" {% if stack.Services[service]['HOSTS'] and ',' in stack.Services[service]['HOSTS'] %}
            - "traefik.frontend.rule=Host:{{ stack.Services[service]['HOSTS']|lower }}"{% else %}
            - "traefik.frontend.rule=Host:{{ stack.Services[service]['subdomains'][0] }}.{{ defaults.Domain }}" {% endif %}{% if stack.Services[service] == "plex" %}
            - "traefik.port=32400"    {% else %}
            - "traefik.port={{ stack.Services[service]['ports'][0].split(':')[1] | replace('/tcp', '') | replace('/udp', '') }}" {% endif %}
            - "traefik.docker.network=frontend"
            - "traefik.frontend.headers.SSLRedirect=true"
            - "traefik.frontend.headers.SSLForceHost=true"
            - "traefik.frontend.headers.STSSeconds=315360000"
            - "traefik.frontend.headers.browserXSSFilter=true"
            - "traefik.frontend.headers.contentTypeNosniff=true"
            - "traefik.frontend.headers.forceSTSHeader=true"
            - "traefik.frontend.headers.customResponseHeaders=X-Robots-Tag:noindex,nofollow,nosnippet,noarchive,notranslate,noimageindex"
            - "traefik.frontend.headers.customFrameOptionsValue='allow-from https:expectedbehaviors.com'"
            - "traefik.frontend.headers.SSLHost={{ stack.Services[service]['subdomains'][0] }}.{{ defaults.Domain }}"
            - "traefik.frontend.headers.STSIncludeSubdomains=true"
            - "traefik.frontend.headers.STSPreload=true"
            - "traefik.frontend.headers.frameDeny=true"
        dns_search:             {{ stack.Services[service]['subdomains'][0] }}.{{ defaults.Domain }}    {% endif %} {% endif %}      {% if 'Commands' in stack.Services[service] and stack.Services[service]['Commands'][0] is defined %}
        command:        {% for command in stack.Services[service]['Commands'] | sort %}
            - "{{ command }}"{% endfor%}{% endif %}{% if ('depends_on' in stack.Services[service] and stack.Services[service]['depends_on']) or (stack.Services[service]['networks'] and stack.Services[service]['networks']['vpn']) %}
        depends_on:     {% for dependency in stack.Services[service]['depends_on'] %}
            - {{ dependency }}              {% endfor %} {% if stack.Services[service]['networks'] and stack.Services[service]['networks']['vpn'] %}
            - {{ defaults.VPN_CONTAINER }}  {% endif %} {% endif %} {% if 'healthcheck' in stack.Services[service] and stack.Services[service]['healthcheck'] %}
        healthcheck:
            test:       {{ stack.Services[service]['healthcheck']['test'] }}
            interval:   {{ stack.Services[service]['healthcheck']['interval'] | default(30, true) }}s
            timeout:    {{ stack.Services[service]['healthcheck']['timeout'] | default(10, true) }}s
            retries:    {{ stack.Services[service]['healthcheck']['retries'] | default(5, true) }}  {% endif %}{% if 'entrypoint' in stack.Services[service] %}
        entrypoint:     |
            bash -c 'bash -s <<EOF  {% for entry in stack.Services[service]["entrypoint"] %}
                {{ entry }}{% endfor %}
            EOF'        {% endif %}
        restart:                always
{%- if stack.Services[service]['OAUTH_PROXY'] or stack.Services[service]['proxy_secrets'] %}
    {{ service }}_proxy:
        container_name: {{ service|indent(8,true) }}_proxy
        secrets:
            - {{ service }}_proxy_client_id
            - {{ service }}_proxy_client_secret
            - {{ service }}_proxy_cookie_secret
        image:          a5huynh/oauth2_proxy:latest
        env_file:
            - globals.env
            - {{ service|lower }}.env
        volumes:
            - ${CONFIGS}/autopirate/authenticated-emails.txt:/authenticated-emails.txt:ro
        user:                 "{{ defaults.PUID }}:{{ defaults.PGID }}"
        networks:
            - backend
            - frontend
        dns_search:             {{ stack.Services[service]['subdomains'][0] }}.{{ defaults.Domain }}
        dns:  {% if not stack.Services[service]['DNS'] %}{% for nameserver in defaults.DNS %}
            - {{ nameserver }}  {% endfor %} {% else %} {% for nameserver in stack.Services[service]['DNS'] %}
            - {{ nameserver }} {% endfor %} {% endif %}
        restart:                always
        labels:
            - "traefik.enable=true"
            - "traefik.backend={{ service }}"
            - "traefik.protocol=http"
            - "traefik.frontend.rule=Host:{{ stack.Services[service]['subdomains'][0] }}.{{ defaults.Domain }}"
            - "traefik.port=4180"
            - "traefik.docker.network=frontend"
            - "traefik.frontend.headers.SSLRedirect=true"
            - "traefik.frontend.headers.SSLForceHost=true"
            - "traefik.frontend.headers.STSSeconds=315360000"
            - "traefik.frontend.headers.browserXSSFilter=true"
            - "traefik.frontend.headers.contentTypeNosniff=true"
            - "traefik.frontend.headers.forceSTSHeader=true"
            - "traefik.frontend.headers.customResponseHeaders=X-Robots-Tag:noindex,nofollow,nosnippet,noarchive,notranslate,noimageindex"
            - "traefik.frontend.headers.customFrameOptionsValue='allow-from https:expectedbehaviors.com'"
            - "traefik.frontend.headers.SSLHost={{ stack.Services[service]['subdomains'][0] }}.{{ defaults.Domain }}"
            - "traefik.frontend.headers.STSIncludeSubdomains=true"
            - "traefik.frontend.headers.STSPreload=true"
            - "traefik.frontend.headers.frameDeny=true"
        depends_on:
            - {{ service }}
        command:    |
            -cookie-secure=false
            -upstream=http://{{ service }}:{{ stack.Services[service]['ports'][0].split(':')[1] }}
            -authenticated-emails-file=/authenticated-emails.txt
            -email-domain=gmail.com
            -http-address=http://0.0.0.0:4180
            -provider=github
            -redirect-url=https://{{ stack.Services[service]['subdomains'][0] }}.{{ defaults.Domain }}  {% endif %} {% endfor %}
